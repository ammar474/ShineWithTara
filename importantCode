  // this code use in future when i doing some consdition on multer or image process
const multer = require('multer');
const path = require('path');

// Setup Multer storage to save files in 'public/uploads'
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, 'public/uploads'));  // Save files in 'public/uploads' folder
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const fileExtension = path.extname(file.originalname);  // Get file extension
        cb(null, file.fieldname + '-' + uniqueSuffix + fileExtension);  // Define the filename
    }
});

// Initialize Multer
const upload = multer({
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 },  // Optional: Set file size limit (5MB here)
    fileFilter: function (req, file, cb) {
        const fileTypes = /jpeg|jpg|png|gif/;
        const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
        const mimeType = fileTypes.test(file.mimetype);

        if (mimeType && extname) {
            return cb(null, true);
        } else {
            cb(new Error('Only images are allowed!'));
        }
    }
});




 //    const items = {
   //     product_id : req.body.items[0].id, 
   //     productName : req.body.items[0].name,
   //     price : req.body.items[0].price, 
   //     quantity : req.body.items[0].quantity,
   //     image : req.body.items[0].image 
   //   }  



//    const multer = require('multer');
// const path = require('path');
// const fs = require('fs');

// const storage = multer.diskStorage({
//     destination: (req, file, cb) => {
//         cb(null, 'public/uploads/');
//     },
//     filename: (req, file, cb) => {
//         cb(null, Date.now() + path.extname(file.originalname));
//     }
// });

// const upload = multer({ storage: storage });
  

//  for role add 
const jwt = require('jsonwebtoken');

// Secret key for signing the token
const SECRET_KEY = 'your-secret-key';

// Example: User login handler
app.post('/login', (req, res) => {
  const { email, password } = req.body;

  // Fake user data for example (in real case, validate from database)
  const user = {
    id: 1,
    email: 'user@example.com',
    role: 'user' // or 'admin' based on user type
  };

  // Authenticate the user (check credentials in real case)
  if (email === user.email && password === 'password123') {
    // Create JWT token with role encoded
    const token = jwt.sign(
      {
        id: user.id,
        email: user.email,
        role: user.role // Encode the role in token
      },
      SECRET_KEY,
      { expiresIn: '1h' } // Token expires in 1 hour
    );

    res.json({ token });
  } else {
    res.status(401).json({ message: 'Invalid credentials' });
  }
});


//  for check  the role admin or user 


  // Middleware to authenticate token and check role
const authenticateToken = (req, res, next) => {
    const token = req.headers['authorization'];
  
    if (!token) return res.status(403).send('Token required');
  
    jwt.verify(token, SECRET_KEY, (err, user) => {
      if (err) return res.status(403).send('Invalid token');
      
      req.user = user;
      next();
    });
  };
  
  // Protected route example (admin only)
  app.get('/admin-dashboard', authenticateToken, (req, res) => {
    if (req.user.role !== 'admin') {
      return res.status(403).send('Access denied, admin only');
    }
    
    res.send('Welcome to Admin Dashboard');
  });
  
  // Protected route example (user only)
  app.get('/user-dashboard', authenticateToken, (req, res) => {
    if (req.user.role !== 'user') {
      return res.status(403).send('Access denied, user only');
    }
    
    res.send('Welcome to User Dashboard');
  });






