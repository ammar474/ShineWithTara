  // this code use in future when i doing some consdition on multer or image process
const multer = require('multer');
const path = require('path');

// Setup Multer storage to save files in 'public/uploads'
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, 'public/uploads'));  // Save files in 'public/uploads' folder
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const fileExtension = path.extname(file.originalname);  // Get file extension
        cb(null, file.fieldname + '-' + uniqueSuffix + fileExtension);  // Define the filename
    }
});

// Initialize Multer
const upload = multer({
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 },  // Optional: Set file size limit (5MB here)
    fileFilter: function (req, file, cb) {
        const fileTypes = /jpeg|jpg|png|gif/;
        const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());
        const mimeType = fileTypes.test(file.mimetype);

        if (mimeType && extname) {
            return cb(null, true);
        } else {
            cb(new Error('Only images are allowed!'));
        }
    }
});




 //    const items = {
   //     product_id : req.body.items[0].id, 
   //     productName : req.body.items[0].name,
   //     price : req.body.items[0].price, 
   //     quantity : req.body.items[0].quantity,
   //     image : req.body.items[0].image 
   //   }  



//    const multer = require('multer');
// const path = require('path');
// const fs = require('fs');

// const storage = multer.diskStorage({
//     destination: (req, file, cb) => {
//         cb(null, 'public/uploads/');
//     },
//     filename: (req, file, cb) => {
//         cb(null, Date.now() + path.extname(file.originalname));
//     }
// });

// const upload = multer({ storage: storage

 
// Mapping object between frontend keys and backend model keys
const keyMapping = {
  frontendKey1: 'modelKey1',
  frontendKey2: 'modelKey2',
  // Add as many key mappings as needed
};

// Function to rename the keys dynamically
const renameKeys = (dataArray) => {
  return dataArray.map(obj => {
      let newObj = {};
      for (let key in obj) {
          if (keyMapping[key]) {
              newObj[keyMapping[key]] = obj[key]; // Rename key
          } else {
              newObj[key] = obj[key]; // If key has no mapping, keep it unchanged
          }
      }
      return newObj;
  });
};

// Sample array of objects coming from frontend
const frontendData = [
  { frontendKey1: 'value1', frontendKey2: 'value2', otherKey: 'value3' },
  { frontendKey1: 'value4', frontendKey2: 'value5', otherKey: 'value6' }
];

// Call the function to rename keys
const renamedData = renameKeys(frontendData);

console.log(renamedData);



  

  


 













  
  
    
  

  

 









  


